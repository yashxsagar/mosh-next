import "./globals.css";
import type { Metadata } from "next";
import { Inter, Maven_Pro, Noto_Sans } from "next/font/google";
import localFont from "next/font/local";
import NavBar from "./NavBar";
import { Suspense } from "react";
// import { SessionProvider } from "next-auth/react"; We don't need to import <SessionProvider> any more, instead we need to import the SessionProvider client-side wrapper,i.e.; AuthProvider
import AuthProvider from "./auth/Provider";
import Script from "next/script";
import GoogleAnalyticsScript from "./GoogleAnalyticsScript";

const inter = Inter({ subsets: ["latin"] });
const mavenPro = Maven_Pro({
  subsets: ["latin"],
  weight: ["400", "500", "600"],
  style: "normal",
});
const notoSans = Noto_Sans({
  subsets: ["latin"],
  style: "normal",
  weight: ["400", "500", "600", "700"],
});
export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

//Applying local font - poppins from our project Directory of the Next.js app
const poppins = localFont({
  src: "../public/fonts/poppins-regular-webfont.woff2",
  variable: "--font-poppins", //declaring a custom CSS property for the poppins local Font
}); //Just like the other pre-installed fonts in next/font/Google, this statement returns an object -->

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en" data-theme="winter">
      {/* For implementing G-Analytics into our Next.js app, the script needs to be as high as possible in the root layout of our app */}
      {/* Instead of using the script html tag we need to use the script component of Next.js */}
      <GoogleAnalyticsScript />
      {/* <body className={inter.className}> */}
      {/* Now let's use a different font of Maven_pro */}
      {/* <body className={mavenPro.className}> */}
      {/* <body className={notoSans.className}> */}
      {/* Now let's use a custom local font type face from our next.js project */}
      {/* <body className={poppins.className}> */}
      {/* Now instead of setting the className to poppins.className, we set it to poppins.variable  */}
      <body className={notoSans.className}>
        {/* Now let's wrap all of our app's contents/body contents within the Session Provider Component */}
        {/* <SessionProvider> */}
        <AuthProvider>
          <NavBar />
          {/* All these children of AuthProvider will be passed as client side components/children to <SessionProvider> Component */}
          {/* Now we can render {children} UI in the main area of our <body> tag */}
          <main className="p-5">{children}</main>
        </AuthProvider>
        {/* </SessionProvider> */}
      </body>
      {/* the chilldren is replaced dynamically by the page or the component at which the user is at currently during runtime */}
    </html>
  );
}
